version: "3" 
services:
  nginx:
    restart: always # cgimap has to wait for postgres
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - settings.env
    volumes:
      #  be sure to overwrite the default nginx config
      # - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/conf.d/website.dev.conf:/etc/nginx/conf.d/default.conf
      - ../nginx/logs:/var/log/nginx
      - ../static:/var/www/static
      - id_assets:/app/vendor/assets/iD
      - website_assets:/app/vendor/assets/website
      - ../cert/www:/var/www/certbot
      - ../cert/conf:/etc/letsencrypt
    depends_on:
      - cgimap
      - website
      - api

  website:
    image: jekyll/jekyll:builder
    tty: true
    volumes:
      - ../publicdomainmap.github.io:/srv/jekyll/
      - website_assets:/srv/jekyll/_site
    command: ["/srv/jekyll/build.sh"]

  postgres:
    image: postgis/postgis:14-3.2-alpine
    env_file:
      - settings.env
    volumes:
      - ../postgres/custom-initdb.sh:/docker-entrypoint-initdb.d/osm-data.sh
      - ../postgres/init.d/:/custom-initdb.d
      - ../postgres/data:/var/lib/postgresql/data

  editor:
    build:
      context: ../editor
      dockerfile: Dockerfile
    volumes:
      - ../editor:/usr/src/editor
      - id_node_modules:/usr/src/editor/node_modules
      - id_assets:/var/www/publicdomainmap/editor/main
    env_file:
      - settings.env
    tty: true
    command: ["npm", "run", "all"]

  #pgadmin:
  #  image: "dpage/pgadmin4:snapshot"
  #  logging:
  #    driver: "none"
  #  ports:
  #    - "3000:80"
  #  env_file:
  #    - settings.env
  #  volumes:
  #    - ../data/pgadmin:/pgadmin

  api:
    build:
      context: ../api
      dockerfile: ./Dockerfile
    env_file:
      - settings.env
    volumes:
      - ../api:/usr/src/app
      - api_node_modules:/usr/src/app/node_modules
    tty: true
    ports:
      - 8000:8000
    command: ['sh', 'start.sh']
  
  #render:
  #  build:
  #    context: ../render
  #    dockerfile: ./Dockerfile
  #  env_file:
  #    - settings.env
  #  volumes:
  #    - ../data:/shared
  #    - ../render/osmosisworkingdir:/osmosisworkingdir
  #  command: ['bash']
  #  tty: true
  
  cgimap:
    restart: always # postgres can take a sec to get online
    build:
      context: ../openstreetmap-cgimap
      dockerfile: ./Dockerfile
    env_file:
      - settings.env
    command: ["/usr/local/bin/openstreetmap-cgimap", "--port=8000", "--instances=30"]
    depends_on:
      - postgres

  tm_backend:
    build:
      context: ../tasking-manager
      dockerfile: ./scripts/docker/Dockerfile.backend
    env_file:
      - tm.env
    volumes:
      -  ../tasking-manager:/usr/src/app
    depends_on:
      - postgres

  tm_migration:
    build:
      context: ../tasking-manager
      dockerfile: ./scripts/docker/Dockerfile.backend
    env_file:
      - tm.env
    volumes:
      -  ../tasking-manager:/usr/src/app
    command: python manage.py db upgrade

  tm_frontend:
    build:
      context: ../tasking-manager
      dockerfile: ./scripts/docker/Dockerfile.frontend
    env_file:
      - tm.env
    ports:
      - 6000:80
    volumes:
      -  ../tasking-manager:/usr/src/app
    depends_on:
      - tm_backend

  #pg_tileserv:
  #  image: pramsey/pg_tileserv:latest
  #  env_file:
  #    - settings.env
  #  ports:
  #    - 7000:7800
  #  depends_on:
  #    - postgres

  pg_featureserv:
    restart: always
    image: pramsey/pg_featureserv:latest
    env_file:
      - settings.env
    ports:
      - 9000:9000
    depends_on:
      - postgres


  certbot:
    image: certbot/certbot
    volumes:
      - ../cert/conf:/etc/letsencrypt
      - ../cert/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12d & wait $${!}; done;'"


volumes:
  api_node_modules:
  id_node_modules:
  website_assets:
  id_assets:
