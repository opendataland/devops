version: "3"

# Define services that will be used in the project
services:
  # Nginx service that will serve as a reverse proxy to the API and front-end
  nginx:
    restart: always
    image: nginx:stable-alpine
    ports:
      - "80:80" # Expose HTTP on port 80
      - "443:443" # Expose HTTPS on port 443
    env_file:
      - settings.env # Load environment variables from file
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d # Nginx configuration
      - ../nginx/logs:/var/log/nginx # Nginx logs
      - ../static:/var/www/static # Static assets
      - ../cert/www:/var/www/certbot # Certbot
      - ../cert/conf:/etc/letsencrypt # SSL certificates
    depends_on:
      - cgimap # Depend on the cgimap service
      - api # Depend on the api service

  # Postgres service with PostGIS extension enabled
  postgres:
    image: postgis/postgis:13-3.1-alpine
    env_file:
      - settings.env # Load environment variables from file
    volumes:
      - ../postgres/custom-initdb.sh:/docker-entrypoint-initdb.d/osm-data.sh # Load OpenStreetMap Schema
      - ../postgres/init.d/:/custom-initdb.d # Custom initialization scripts
      - ../postgres/data:/var/lib/postgresql/data # Mount database data directory

  # API service built from custom Dockerfile
  api:
    build:
      context: ../api
      dockerfile: ./Dockerfile
    env_file:
      - settings.env # Load environment variables from file
    volumes:
      - ../api:/usr/src/app # API source code
      - api_node_modules:/usr/src/app/node_modules # Persist Node.js modules on a volume
    command: ['sh', 'start.sh'] # script to start the nodejs api

  # CGImap service built from custom Dockerfile
  cgimap:
    build:
      context: ../openstreetmap-cgimap 
      dockerfile: ./Dockerfile
    env_file:
      - settings.env # Load environment variables from file
    command: ["/usr/local/bin/openstreetmap-cgimap", "--port=8000", "--instances=30"] # Run cgimap on port 8080
    depends_on:
      - postgres # Don't start cgimap until the postgres service is ready

  # Certbot service for SSL certificate management
  certbot:
    image: certbot/certbot
    volumes:
      - ../cert/conf:/etc/letsencrypt #  SSL certificates
      - ../cert/www:/var/www/certbot 
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12d & wait $${!}; done;'" # Run Certbot in the background

# Define persistent volumes that can be shared among the services
volumes:
  api_node_modules: # Node.js modules volume
